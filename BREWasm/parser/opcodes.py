Unreachable = 0x00
Nop = 0x01
Block = 0x02
Loop = 0x03
If = 0x04
Else_ = 0x05
End_ = 0x0B
Br = 0x0C
BrIf = 0x0D
BrTable = 0x0E
Return = 0x0F
Call = 0x10
CallIndirect = 0x11
Drop = 0x1A
Select = 0x1B
LocalGet = 0x20
LocalSet = 0x21
LocalTee = 0x22
GlobalGet = 0x23
GlobalSet = 0x24
I32Load = 0x28
I64Load = 0x29
F32Load = 0x2A
F64Load = 0x2B
I32Load8S = 0x2C
I32Load8U = 0x2D
I32Load16S = 0x2E
I32Load16U = 0x2F
I64Load8S = 0x30
I64Load8U = 0x31
I64Load16S = 0x32
I64Load16U = 0x33
I64Load32S = 0x34
I64Load32U = 0x35
I32Store = 0x36
I64Store = 0x37
F32Store = 0x38
F64Store = 0x39
I32Store8 = 0x3A
I32Store16 = 0x3B
I64Store8 = 0x3C
I64Store16 = 0x3D
I64Store32 = 0x3E
MemorySize = 0x3F
MemoryGrow = 0x40
I32Const = 0x41
I64Const = 0x42
F32Const = 0x43
F64Const = 0x44
I32Eqz = 0x45
I32Eq = 0x46
I32Ne = 0x47
I32LtS = 0x48
I32LtU = 0x49
I32GtS = 0x4A
I32GtU = 0x4B
I32LeS = 0x4C
I32LeU = 0x4D
I32GeS = 0x4E
I32GeU = 0x4F
I64Eqz = 0x50
I64Eq = 0x51
I64Ne = 0x52
I64LtS = 0x53
I64LtU = 0x54
I64GtS = 0x55
I64GtU = 0x56
I64LeS = 0x57
I64LeU = 0x58
I64GeS = 0x59
I64GeU = 0x5A
F32Eq = 0x5B
F32Ne = 0x5C
F32Lt = 0x5D
F32Gt = 0x5E
F32Le = 0x5F
F32Ge = 0x60
F64Eq = 0x61
F64Ne = 0x62
F64Lt = 0x63
F64Gt = 0x64
F64Le = 0x65
F64Ge = 0x66
I32Clz = 0x67
I32Ctz = 0x68
I32PopCnt = 0x69
I32Add = 0x6A
I32Sub = 0x6B
I32Mul = 0x6C
I32DivS = 0x6D
I32DivU = 0x6E
I32RemS = 0x6F
I32RemU = 0x70
I32And = 0x71
I32Or = 0x72
I32Xor = 0x73
I32Shl = 0x74
I32ShrS = 0x75
I32ShrU = 0x76
I32Rotl = 0x77
I32Rotr = 0x78
I64Clz = 0x79
I64Ctz = 0x7A
I64PopCnt = 0x7B
I64Add = 0x7C
I64Sub = 0x7D
I64Mul = 0x7E
I64DivS = 0x7F
I64DivU = 0x80
I64RemS = 0x81
I64RemU = 0x82
I64And = 0x83
I64Or = 0x84
I64Xor = 0x85
I64Shl = 0x86
I64ShrS = 0x87
I64ShrU = 0x88
I64Rotl = 0x89
I64Rotr = 0x8A
F32Abs = 0x8B
F32Neg = 0x8C
F32Ceil = 0x8D
F32Floor = 0x8E
F32Trunc = 0x8F
F32Nearest = 0x90
F32Sqrt = 0x91
F32Add = 0x92
F32Sub = 0x93
F32Mul = 0x94
F32Div = 0x95
F32Min = 0x96
F32Max = 0x97
F32CopySign = 0x98
F32CopySign = 0x98
F64Abs = 0x99
F64Neg = 0x9A
F64Ceil = 0x9B
F64Floor = 0x9C
F64Trunc = 0x9D
F64Nearest = 0x9E
F64Sqrt = 0x9F
F64Add = 0xA0
F64Sub = 0xA1
F64Mul = 0xA2
F64Div = 0xA3
F64Min = 0xA4
F64Max = 0xA5
F64CopySign = 0xA6
I32WrapI64 = 0xA7
I32TruncF32S = 0xA8
I32TruncF32U = 0xA9
I32TruncF64S = 0xAA
I32TruncF64U = 0xAB
I64ExtendI32S = 0xAC
I64ExtendI32U = 0xAD
I64TruncF32S = 0xAE
I64TruncF32U = 0xAF
I64TruncF64S = 0xB0
I64TruncF64U = 0xB1
F32ConvertI32S = 0xB2
F32ConvertI32U = 0xB3
F32ConvertI64S = 0xB4
F32ConvertI64U = 0xB5
F32DemoteF64 = 0xB6
F64ConvertI32S = 0xB7
F64ConvertI32U = 0xB8
F64ConvertI64S = 0xB9
F64ConvertI64U = 0xBA
F64PromoteF32 = 0xBB
I32ReinterpretF32 = 0xBC
I64ReinterpretF64 = 0xBD
F32ReinterpretI32 = 0xBE
F64ReinterpretI64 = 0xBF
I32Extend8S = 0xC0
I32Extend16S = 0xC1
I64Extend8S = 0xC2
I64Extend16S = 0xC3
I64Extend32S = 0xC4

RefNull = 0xD0  # ref.null t
RefIsNull = 0xD1  # ref.is_null
RefFunc = 0xD2  # ref.func x

I32TruncSatF32S = 0xFC00  # i32.trunc_sat_f32_s
I32TruncSatF32U = 0xFC01  # i32.trunc_sat_f32_u
I32TruncSatF64S = 0xFC02  # i32.trunc_sat_f64_s
I32TruncSatF64U = 0xFC03  # i32.trunc_sat_f64_u
I64TruncSatF32S = 0xFC04  # i64.trunc_sat_f32_s
I64TruncSatF32U = 0xFC05  # i64.trunc_sat_f32_u
I64TruncSatF64S = 0xFC06  # i64.trunc_sat_f64_s
I64TruncSatF64U = 0xFC07  # i64.trunc_sat_f64_u
MemoryInit = 0xFC08  # memory.init
DataDrop = 0xFC09  # data.drop
MemoryCopy = 0xFC0A  # memory.copy
MemoryFill = 0xFC0B  # memory.fill
TableInit = 0xFC0C  # table.init
ElemDrop = 0xFC0D  # elem.drop
TableCopy = 0xFC0E  # table.copy
TableGrow = 0xFC0F  # table.grow
TableSize = 0xFC10  # table.size
TableFill = 0xFC11  # table.fill

V128Load = 0xFD00  # v128.load memory
V128Load8x8S = 0xFD01  # v128.load8x8_s
V128Load8x8U = 0xFD02  # v128.load8x8_u
V128Load16x4S = 0xFD03  # v128.load16x4_s
V128Load16x4U = 0xFD04  # v128.load16x4_u
V128Load32x2S = 0xFD05  # v128.load32x2_s
V128Load32x2U = 0xFD06  # v128.load32x2_u
V128Load8Splat = 0xFD07  # v128.load8_splat
V128Load16Splat = 0xFD08  # v128.load16_splat
V128Load32Splat = 0xFD09  # v128.load32_splat
V128Load64Splat = 0xFD0A  # v128.load64_splat
V128Store = 0xFD0B  # v128.store
V128Const = 0xFD0C  # v128.const i128
I8x16Shuffle = 0xFD0D  # i8x16 shuffle
I8x16Swizzle = 0xFD0E  # i8x16.swizzle
I8x16Splat = 0xFD0F  # i8x16.splat
I16x8Splat = 0xFD10  # i16x8.splat
I32x4Splat = 0xFD11  # i32x4.splat
I64x2Splat = 0xFD12  # i64x2.splat
F32x4Splat = 0xFD13  # f32x4.splat
F64x2Splat = 0xFD14  # f64x2.splat
I8x16ExtractLaneS = 0xFD15  # i8x16.extract_lane_s
I8x16ExtractLaneU = 0xFD16  # i8x16.extract_lane_u
I8x16ReplaceLane = 0xFD17  # i8x16.extract_lane_s
I16x8ExtractLaneS = 0xFD18  # i16x8.extract_lane_s
I16x8ExtractLaneU = 0xFD19  # i16x8.extract_lane_u
I16x8ReplaceLane = 0xFD1A  # i16x8.replace_lane
I32x4ExtractLane = 0xFD1B  # i32x4.extract_lane
I32x4ReplaceLane = 0xFD1C  # I32x4.replace_lane
I64x2ExtractLane = 0xFD1D  # I64x2.extract_lane
I64x2ReplaceLane = 0xFD1E  # I64x2.replace_lane
F32x4ExtractLane = 0xFD1F  # F32x4.extract_lane
F32x4ReplaceLane = 0xFD20  # F32x4.replace_lane
F64x2ExtractLane = 0xFD21  # F64x2.extract_lane
F64x2ReplaceLane = 0xFD22  # F64x2.replace_lane

I8x16Eq = 0xFD23  # i8x16.eq
I8x16Ne = 0xFD24  # i8x16.ne
I8x16LtS = 0xFD25  # i8x16.lt_s
I8x16LtU = 0xFD26  # i8x16.lt_u
I8x16GtS = 0xFD27  # i8x16.gt_s
I8x16GtU = 0xFD28  # i8x16.gt_u
I8x16LeS = 0xFD29  # i8x16.le_s
I8x16LeU = 0xFD2A  # i8x16.le_u
I8x16GeS = 0xFD2B  # i8x16.ge_s
I8x16GeU = 0xFD2C  # i8x16.ge_u
I16x8Eq = 0xFD2D  # i16x8.eq
I16x8Ne = 0xFD2E  # i16x8.ne
I16x8LtS = 0xFD2F  # i16x8.lt_s
I16x8LtU = 0xFD30  # i16x8.lt_u
I16x8GtS = 0xFD31  # i16x8.gt_s
I16x8GtU = 0xFD32  # i16x8.gt_u
I16x8LeS = 0xFD33  # i16x8.le_s
I16x8LeU = 0xFD34  # i16x8.le_u
I16x8GeS = 0xFD35  # i16x8.ge_s
I16x8GeU = 0xFD36  # i16x8.ge_u

I32x4Eq = 0xFD37  # i32x4.eq
I32x4Ne = 0xFD38  # i32x4.ne
I32x4LtS = 0xFD39  # i32x4.lt_s
I32x4LtU = 0xFD3A  # i32x4.lt_u
I32x4GtS = 0xFD3B  # i32x4.gt_s
I32x4GtU = 0xFD3C  # i32x4.gt_u
I32x4LeS = 0xFD3D  # i32x4.le_s
I32x4LeU = 0xFD3E  # i32x4.le_u
I32x4GeS = 0xFD3F  # i32x4.ge_s
I32x4GeU = 0xFD40  # i32x4.ge_u
F32x4Eq = 0xFD41  # f32x4.eq
F32x4Ne = 0xFD42  # f32x4.ne
F32x4Lt = 0xFD43  # f32x4.lt
F32x4Gt = 0xFD44  # f32x4.gt
F32x4Le = 0xFD45  # f32x4.le
F32x4Ge = 0xFD46  # f32x4.ge
F64x2Eq = 0xFD47  # f64x2.eq
F64x2Ne = 0xFD48  # f64x2.ne
F64x2Lt = 0xFD49  # f64x2.lt
F64x2Gt = 0xFD4A  # f64x2.gt
F64x2Le = 0xFD4B  # f64x2.le
F64x2Ge = 0xFD4C  # f64x2.ge

V128Not = 0xFD4D  # v128.not
V128And = 0xFD4E  # v128.and
V128AndNot = 0xFD4F  # v128.andnot
V128Or = 0xFD50  # v128.or
V128Xor = 0xFD51  # v128.xor
V128BitSelect = 0xFD52  # v128.bitselect
V128AnyTrue = 0xFD53  # v128.any_true
V128Load8Lane = 0xFD54  # v128.load8_lane
V128Load16Lane = 0xFD55  # v128.load16_lane
V128Load32Lane = 0xFD56  # v128.load32_lane
V128Load64Lane = 0xFD57  # v128.load64_lane
V128Store8Lane = 0xFD58  # v128.store8_lane
V128Store16Lane = 0xFD59  # v128.store16_lane
V128Store32Lane = 0xFD5A  # v128.store32_lane
V128Store64Lane = 0xFD5B  # v128.store64_lane
V128Load32Zero = 0xFD5C  # v128.load32_zero
V128Load64Zero = 0xFD5D  # v128.load64_zero
F32x4DemoteF64x2Zero = 0xFD5E  # f32x4.demote_f64x2_zero
F64x2PromoteLowF32x4 = 0xFD5F  # f64x2.promote_low_f32x4

I8x16Abs = 0xFD60  # i8x16.abs
I8x16Neg = 0xFD61  # i8x16.neg
I8x16Popcnt = 0xFD62  # i8x16.popcnt
I8x16AllTrue = 0xFD63  # i8x16.all_true
I8x16Bitmask = 0xFD64  # i8x16.bitmask
I8x16NarrowI16x8S = 0xFD65  # i8x16.narrow_i16x8_s
I8x16NarrowI16x8U = 0xFD66  # i8x16.narrow_i16x8_u
F32x4Ceil = 0xFD67  # f32x4.ceil
F32x4Floor = 0xFD68  # f32x4.floor
F32x4Trunc = 0xFD69  # f32x4.trunc
F32x4Nearest = 0xFD6A  # f32x4.nearest
I8x16Shl = 0xFD6B  # i8x16.shl
I8x16ShrS = 0xFD6C  # i8x16.shr_s
I8x16ShrU = 0xFD6D  # i8x16.shr_u
I8x16Add = 0xFD6E  # i8x16.add
I8x16AddSatS = 0xFD6F  # i8x16.add_sat_s
I8x16AddSatU = 0xFD70  # i8x16.add_sat_u
I8x16Sub = 0xFD71  # i8x16.sub
I8x16SubSatS = 0xFD72  # i8x16.sub_sat_s
I8x16SubSatU = 0xFD73  # i8x16.sub_sat_u
F64x2Ceil = 0xFD74  # f64x2.ceil
F64x2Floor = 0xFD75  # f64x2.floor
I8x16MinS = 0xFD76  # i8x16.min_s
I8x16MinU = 0xFD77  # i8x16.min_u
I8x16MaxS = 0xFD78  # i8x16.max_s
I8x16MaxU = 0xFD79  # i8x16.max_u
F64x2Trunc = 0xFD7A  # f64x2.trunc
I8x16AvgrU = 0xFD7B  # i8x16.avgr_u

I16x8ExtaddPairwiseI8x16S = 0xFD7C  # i16x8.extadd_pairwise_i8x16_s
I16x8ExtaddPairwiseI8x16U = 0xFD7D  # i16x8.extadd_pairwise_i8x16_u
I32x4ExtaddPairwiseI16x8S = 0xFD7E  # i32x4.extadd_pairwise_i16x8_s
I32x4ExtaddPairwiseI16x8U = 0xFD7F  # i32x4.extadd_pairwise_i16x8_u

I16x8Abs = 0xFD8001  # i16x8.abs
I16x8Neg = 0xFD8101  # i16x8.neg
I16x8Q15mulrSatS = 0xFD8201  # i16x8.q15mulr_sat_s
I16x8AllTrue = 0xFD8301  # i16x8.all_true
I16x8Bitmask = 0xFD8401  # i16x8.bitmask
I16x8NarrowI32x4S = 0xFD8501  # i16x8.narrow_i32x4_s
I16x8NarrowI32x4U = 0xFD8601  # i16x8.narrow_i32x4_u
I16x8ExtendLowI8x16S = 0xFD8701  # i16x8.extend_low_i8x16_s
I16x8ExtendHighI8x16S = 0xFD8801  # i16x8.extend_high_i8x16_s
I16x8ExtendLowI8x16U = 0xFD8901  # i16x8.extend_low_i8x16_u
I16x8ExtendHighI8x16U = 0xFD8A01  # i16x8.extend_high_i8x16_u

I16x8Shl = 0xFD8B01  # i16x8.shl
I16x8ShrS = 0xFD8C01  # i16x8.shr_s
I16x8ShrU = 0xFD8D01  # i16x8.shr_u
I16x8Add = 0xFD8E01  # i16x8.add
I16x8AddSatS = 0xFD8F01  # i16x8.add_sat_s
I16x8AddSatU = 0xFD9001  # i16x8.add_sat_u
I16x8Sub = 0xFD9101  # i16x8.sub
I16x8SubSatS = 0xFD9201  # i16x8.sub_sat_s
I16x8SubSatU = 0xFD9301  # i16x8.sub_sat_u
F64x2Nearest = 0xFD9401  # f64x2.nearest
I16x8Mul = 0xFD9501  # i16x8.mul
I16x8MinS = 0xFD9601  # i16x8.min_s
I16x8MinU = 0xFD9701  # i16x8.min_u
I16x8MaxS = 0xFD9801  # i16x8.max_s
I16x8MaxU = 0xFD9901  # i16x8.max_u
I16x8AvgrU = 0xFD9B01  # i16x8.avgr_u
I16x8ExtmulLowI8x16S = 0xFD9C01  # i16x8.extmul_low_i8x16_s
I16x8ExtmulHighI8x16S = 0xFD9D01  # i16x8.extmul_high_i8x16_s
I16x8ExtmulLowI8x16U = 0xFD9E01  # i16x8.extmul_low_i8x16_u
I16x8ExtmulHighI8x16U = 0xFD9F01  # i16x8.extmul_high_i8x16_u

I32x4Abs = 0xFDA001  # i32x4.abs
I32x4Neg = 0xFDA101  # i32x4.neg
I32x4AllTrue = 0xFDA301  # i32x4.all_true
I32x4Bitmask = 0xFDA401  # i32x4.bitmask
I32x4ExtendLowI16x8S = 0xFDA701  # i32x4.extend_low_i16x8_s
I32x4ExtendHighI16x8S = 0xFDA801  # i32x4.extend_high_i16x8_s
I32x4ExtendLowI16x8U = 0xFDA901  # i32x4.extend_low_i16x8_u
I32x4ExtendHighI16x8U = 0xFDAA01  # i32x4.extend_high_i16x8_u
I32x4Shl = 0xFDAB01  # i32x4.shl
I32x4ShrS = 0xFDAC01  # i32x4.shr_s
I32x4ShrU = 0xFDAD01  # i32x4.shr_u
I32x4Add = 0xFDAE01  # i32x4.add
I32x4Sub = 0xFDB101  # i32x4.sub
I32x4Mul = 0xFDB501  # i32x4.mul
I32x4MinS = 0xFDB601  # i32x4.min_s
I32x4MinU = 0xFDB701  # i32x4.min_u
I32x4MaxS = 0xFDB801  # i32x4.max_s
I32x4MaxU = 0xFDB901  # i32x4.max_u
I32x4DotI16x8S = 0xFDBA01  # i32x4.dot_i16x8_s
I32x4ExtmulLowI16x8S = 0xFDBC01  # i32x4.extmul_low_i16x8_s
I32x4ExtmulHighI16x8S = 0xFDBD01  # i32x4.extmul_high_i16x8_s
I32x4ExtmulLowI16x8U = 0xFDBE01  # i32x4.extmul_low_i16x8_u
I32x4ExtmulHighI16x8U = 0xFDBF01  # i32x4.extmul_high_i16x8_u

I64x2Abs = 0xFDC001  # I64x2.abs
I64x2Neg = 0xFDC101  # I64x2.neg
I64x2AllTrue = 0xFDC301  # I64x2.all_true
I64x2Bitmask = 0xFDC401  # i64x2.bitmask
I64x2ExtendLowI32x4S = 0xFDC701  # i64x2.extend_low_i32x4_s
I64x2ExtendHighI32x4S = 0xFDC801  # i64x2.extend_high_i32x4_s
I64x2ExtendLowI32x4U = 0xFDC901  # i64x2.extend_low_i32x4_u
I64x2ExtendHighI32x4U = 0xFDCA01  # i64x2.extend_high_i32x4_u
I64x2Shl = 0xFDCB01  # i64x2.shl
I64x2ShrS = 0xFDCC01  # i64x2.shr_s
I64x2ShrU = 0xFDCD01  # i64x2.shr_u
I64x2Add = 0xFDCE01  # i64x2.add
I64x2Sub = 0xFDD101  # i64x2.sub
I64x2Mul = 0xFDD501  # i64x2.mul
I64x2Eq = 0xFDD601  # i64x2.eq
I64x2Ne = 0xFDD701  # i64x2.ne
I64x2LtS = 0xFDD801  # i64x2.lt_s
I64x2GtS = 0xFDD901  # i64x2.gt_s
I64x2LeS = 0xFDDA01  # i64x2.le_s
I64x2GeS = 0xFDDB01  # i64x2.ge_s
I64x2ExtmulLowI32x4S = 0xFDDC01  # i64x2.extmul_low_i32x4_s
I64x2ExtmulHighI32x4S = 0xFDDD01  # i64x2.extmul_high_i32x4_s
I64x2ExtmulLowI32x4U = 0xFDDE01  # i64x2.extmul_low_i32x4_u
I64x2ExtmulHighI32x4U = 0xFDDF01  # i64x2.extmul_high_i32x4_u

F32x4Abs = 0xFDE001  # f32x4.abs
F32x4Neg = 0xFDE101  # f32x4.neg
F32x4Sqrt = 0xFDE301  # f32x4.sqrt
F32x4Add = 0xFDE401  # f32x4.add
F32x4Sub = 0xFDE501  # f32x4.sub
F32x4Mul = 0xFDE601  # f32x4.mul
F32x4Div = 0xFDE701  # f32x4.div
F32x4Min = 0xFDE801  # f32x4.min
F32x4Max = 0xFDE901  # f32x4.max
F32x4Pmin = 0xFDEA01  # f32x4.pmin
F32x4Pmax = 0xFDEB01  # f32x4.pmax
F64x2Abs = 0xFDEC01  # f64x2.abs
F64x2Neg = 0xFDED01  # f64x2.neg
F64x2Sqrt = 0xFDEF01  # f64x2.sqrt
F64x2Add = 0xFDF001  # f64x2.add
F64x2Sub = 0xFDF101  # f64x2.sub
F64x2Mul = 0xFDF201  # f64x2.mul
F64x2Div = 0xFDF301  # f64x2.div
F64x2Min = 0xFDF401  # f64x2.min
F64x2Max = 0xFDF501  # f64x2.max
F64x2Pmin = 0xFDF601  # f64x2.pmin
F64x2Pmax = 0xFDF701  # f64x2.pmax

I32x4TruncSatF32x4S = 0xFDF801  # i32x4.trunc_sat_f32x4_s
I32x4TruncSatF32x4U = 0xFDF901  # i32x4.trunc_sat_f32x4_u
F32x4ConvertI32x4S = 0xFDFA01  # f32x4.convert_i32x4_s
F32x4ConvertI32x4U = 0xFDFB01  # f32x4.convert_i32x4_u
I32x4TruncSatF64x2SZero = 0xFDFC01  # i32x4.trunc_sat_f64x2_s_zero
I32x4TruncSatF64x2UZero = 0xFDFD01  # i32x4.trunc_sat_f64x2_u_zero
F64x2ConvertLowI32x4S = 0xFDFE01  # f64x2.convert_low_i32x4_s
F64x2ConvertLowI32x4U = 0xFDFF01  # f64x2.convert_low_i32x4_u



